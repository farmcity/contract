{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmToken",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardFinishTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastUpdateTimePerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDurationPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardFinishTimePerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardRatePerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setRewardDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6dae2ad63ba841f4f4468e23e3a0e670",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardFinishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastUpdateTimePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDurationPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardFinishTimePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRatePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"admin@farmcity.dev\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of reward tokens to add\",\"tokenId\":\"The ID of the token to add rewards for\"}},\"claimReward(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token to claim rewards for\"}},\"claimRewards(uint256[])\":{\"params\":{\"tokenIds\":\"Array of token IDs to claim rewards for\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"earned(address,uint256)\":{\"params\":{\"account\":\"The address of the user\",\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The earned rewards\"}},\"exit(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token to exit from\"}},\"getRewardFinishTime(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The reward finish time\"}},\"getRewardRate(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The reward rate (tokens per second)\"}},\"getStakedAmount(address,uint256)\":{\"params\":{\"account\":\"The address of the user\",\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The staked amount\"}},\"getTotalStaked(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The total staked amount\"}},\"initialize(address,address,address)\":{\"params\":{\"_farmToken\":\"The address of the FarmCity ERC1155 token contract\",\"_rewardToken\":\"The address of the USDT ERC20 token contract\",\"initialOwner\":\"The address of the initial owner\"}},\"lastTimeRewardApplicable(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The timestamp when rewards were last applicable\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"recoverERC1155(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to recover\",\"tokenAddress\":\"The address of the token to recover\",\"tokenId\":\"The ID of the token to recover\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to recover\",\"tokenAddress\":\"The address of the token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rewardPerToken(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"},\"returns\":{\"_0\":\"The current reward per token\"}},\"setRewardDuration(uint256,uint256)\":{\"params\":{\"duration\":\"The new duration in seconds\",\"tokenId\":\"The ID of the token to set the duration for\"}},\"stake(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to stake\",\"tokenId\":\"The ID of the token to stake\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to unstake\",\"tokenId\":\"The ID of the token to unstake\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"FarmCityStaking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Add rewards for a specific token ID\"},\"claimReward(uint256)\":{\"notice\":\"Claim accumulated rewards for a specific token ID\"},\"claimRewards(uint256[])\":{\"notice\":\"Claim accumulated rewards for multiple token IDs\"},\"earned(address,uint256)\":{\"notice\":\"Calculate the earned rewards for a user and token ID\"},\"exit(uint256)\":{\"notice\":\"Exit: Unstake all tokens and claim rewards for a specific token ID\"},\"farmToken()\":{\"notice\":\"The FarmCity ERC1155 token contract\"},\"getRewardFinishTime(uint256)\":{\"notice\":\"Get the reward finish time for a token ID\"},\"getRewardRate(uint256)\":{\"notice\":\"Get the reward rate for a specific token ID\"},\"getStakedAmount(address,uint256)\":{\"notice\":\"Get the staked amount for a user and token ID\"},\"getTotalStaked(uint256)\":{\"notice\":\"Get the total staked amount for a token ID\"},\"initialize(address,address,address)\":{\"notice\":\"Initialize the contract\"},\"lastTimeRewardApplicable(uint256)\":{\"notice\":\"Get the last time rewards were applicable for a token ID\"},\"lastUpdateTimePerToken(uint256)\":{\"notice\":\"Mapping from tokenId to last update time\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type\"},\"pause()\":{\"notice\":\"Pause staking\"},\"recoverERC1155(address,uint256,uint256)\":{\"notice\":\"Recover ERC1155 tokens sent to this contract by mistake\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to this contract by mistake\"},\"rewardDurationPerToken(uint256)\":{\"notice\":\"Mapping from tokenId to reward duration in seconds\"},\"rewardFinishTimePerToken(uint256)\":{\"notice\":\"Mapping from tokenId to reward finish time\"},\"rewardPerToken(uint256)\":{\"notice\":\"Calculate the current reward per token for a specific token ID\"},\"rewardPerTokenStored(uint256)\":{\"notice\":\"Mapping from tokenId to accumulated rewards per token\"},\"rewardRatePerToken(uint256)\":{\"notice\":\"Mapping from tokenId to reward rate (tokens per second)\"},\"rewardToken()\":{\"notice\":\"The USDT ERC20 token used for rewards\"},\"setRewardDuration(uint256,uint256)\":{\"notice\":\"Set the reward duration for a specific token ID\"},\"stake(uint256,uint256)\":{\"notice\":\"Stake FarmCity tokens\"},\"stakeInfo(uint256,address)\":{\"notice\":\"Mapping from tokenId to user address to stake info\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface\"},\"totalStaked(uint256)\":{\"notice\":\"Mapping from tokenId to total staked amount\"},\"unpause()\":{\"notice\":\"Unpause staking\"},\"unstake(uint256,uint256)\":{\"notice\":\"Unstake FarmCity tokens\"}},\"notice\":\"Staking contract for FarmCity ERC1155 tokens with USDT rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FarmCityStaking.sol\":\"FarmCityStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf189f9b417fe1931e1ab706838aff1128528694a9fcdb5ff7665197f2ca57d09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/FarmCityStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC1155ReceiverUpgradeable.sol\\\";\\n\\n/// @title FarmCityStaking\\n/// @notice Staking contract for FarmCity ERC1155 tokens with USDT rewards\\n/// @custom:security-contact admin@farmcity.dev\\ncontract FarmCityStaking is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155ReceiverUpgradeable,\\n    UUPSUpgradeable\\n{\\n    // ================ State Variables ================\\n\\n    /// @notice The FarmCity ERC1155 token contract\\n    IERC1155 public farmToken;\\n\\n    /// @notice The USDT ERC20 token used for rewards\\n    IERC20 public rewardToken;\\n\\n    /// @notice Precision factor for reward calculations (1e18)\\n    uint256 private constant PRECISION_FACTOR = 1e18;\\n\\n    /// @notice Struct to track staking information for each user and tokenId\\n    struct StakeInfo {\\n        uint256 amount; // Amount of tokens staked\\n        uint256 rewardPerTokenPaid; // Snapshot of rewardPerToken at last update\\n        uint256 rewards; // Accumulated rewards\\n        uint256 lastUpdateTime; // Last time rewards were calculated for this user\\n    }\\n\\n    /// @notice Mapping from tokenId to user address to stake info\\n    mapping(uint256 => mapping(address => StakeInfo)) public stakeInfo;\\n\\n    /// @notice Mapping from tokenId to total staked amount\\n    mapping(uint256 => uint256) public totalStaked;\\n\\n    /// @notice Mapping from tokenId to accumulated rewards per token\\n    mapping(uint256 => uint256) public rewardPerTokenStored;\\n\\n    /// @notice Mapping from tokenId to last update time\\n    mapping(uint256 => uint256) public lastUpdateTimePerToken;\\n\\n    /// @notice Mapping from tokenId to reward rate (tokens per second)\\n    mapping(uint256 => uint256) public rewardRatePerToken;\\n\\n    /// @notice Mapping from tokenId to reward duration in seconds\\n    mapping(uint256 => uint256) public rewardDurationPerToken;\\n\\n    /// @notice Mapping from tokenId to reward finish time\\n    mapping(uint256 => uint256) public rewardFinishTimePerToken;\\n\\n    // ================ Events ================\\n\\n    event Staked(address indexed user, uint256 indexed tokenId, uint256 amount);\\n    event Unstaked(address indexed user, uint256 indexed tokenId, uint256 amount);\\n    event RewardClaimed(address indexed user, uint256 indexed tokenId, uint256 reward);\\n    event RewardAdded(uint256 indexed tokenId, uint256 amount, uint256 duration);\\n    event RewardsDurationUpdated(uint256 indexed tokenId, uint256 newDuration);\\n    event RecoveredERC20(address indexed token, uint256 amount);\\n    event RecoveredERC1155(address indexed token, uint256 tokenId, uint256 amount);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ================ Initializer ================\\n\\n    /// @notice Initialize the contract\\n    /// @param _farmToken The address of the FarmCity ERC1155 token contract\\n    /// @param _rewardToken The address of the USDT ERC20 token contract\\n    /// @param initialOwner The address of the initial owner\\n    function initialize(address _farmToken, address _rewardToken, address initialOwner) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init(initialOwner);\\n        __Pausable_init();\\n        __ERC165_init();\\n        __UUPSUpgradeable_init();\\n\\n        require(_farmToken != address(0), \\\"FarmCityStaking: farm token is zero address\\\");\\n        require(_rewardToken != address(0), \\\"FarmCityStaking: reward token is zero address\\\");\\n\\n        farmToken = IERC1155(_farmToken);\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    // ================ External Functions ================\\n\\n    /// @notice Stake FarmCity tokens\\n    /// @param tokenId The ID of the token to stake\\n    /// @param amount The amount of tokens to stake\\n    function stake(uint256 tokenId, uint256 amount) external nonReentrant whenNotPaused {\\n        require(amount > 0, \\\"FarmCityStaking: cannot stake 0\\\");\\n\\n        // Update rewards for the user\\n        _updateReward(msg.sender, tokenId);\\n\\n        // Update stake info\\n        stakeInfo[tokenId][msg.sender].amount += amount;\\n        totalStaked[tokenId] += amount;\\n\\n        // Transfer tokens from user to this contract\\n        farmToken.safeTransferFrom(msg.sender, address(this), tokenId, amount, \\\"\\\");\\n\\n        emit Staked(msg.sender, tokenId, amount);\\n    }\\n\\n    /// @notice Unstake FarmCity tokens\\n    /// @param tokenId The ID of the token to unstake\\n    /// @param amount The amount of tokens to unstake\\n    function unstake(uint256 tokenId, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"FarmCityStaking: cannot unstake 0\\\");\\n\\n        StakeInfo storage userStake = stakeInfo[tokenId][msg.sender];\\n        require(userStake.amount >= amount, \\\"FarmCityStaking: unstake amount exceeds balance\\\");\\n\\n        // Update rewards for the user\\n        _updateReward(msg.sender, tokenId);\\n\\n        // Update stake info\\n        userStake.amount -= amount;\\n        totalStaked[tokenId] -= amount;\\n\\n        // Transfer tokens back to user\\n        farmToken.safeTransferFrom(address(this), msg.sender, tokenId, amount, \\\"\\\");\\n\\n        emit Unstaked(msg.sender, tokenId, amount);\\n    }\\n\\n    /// @notice Claim accumulated rewards for a specific token ID\\n    /// @param tokenId The ID of the token to claim rewards for\\n    function claimReward(uint256 tokenId) external nonReentrant {\\n        // Update rewards for the user\\n        _updateReward(msg.sender, tokenId);\\n\\n        StakeInfo storage userStake = stakeInfo[tokenId][msg.sender];\\n        uint256 reward = userStake.rewards;\\n\\n        if (reward > 0) {\\n            userStake.rewards = 0;\\n\\n            // Transfer rewards to user\\n            require(rewardToken.transfer(msg.sender, reward), \\\"FarmCityStaking: reward transfer failed\\\");\\n\\n            emit RewardClaimed(msg.sender, tokenId, reward);\\n        }\\n    }\\n\\n    /// @notice Claim accumulated rewards for multiple token IDs\\n    /// @param tokenIds Array of token IDs to claim rewards for\\n    function claimRewards(uint256[] calldata tokenIds) external nonReentrant {\\n        uint256 totalReward = 0;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // Update rewards for the user\\n            _updateReward(msg.sender, tokenId);\\n\\n            StakeInfo storage userStake = stakeInfo[tokenId][msg.sender];\\n            uint256 reward = userStake.rewards;\\n\\n            if (reward > 0) {\\n                userStake.rewards = 0;\\n                totalReward += reward;\\n\\n                emit RewardClaimed(msg.sender, tokenId, reward);\\n            }\\n        }\\n\\n        if (totalReward > 0) {\\n            // Transfer total rewards to user\\n            require(rewardToken.transfer(msg.sender, totalReward), \\\"FarmCityStaking: reward transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Exit: Unstake all tokens and claim rewards for a specific token ID\\n    /// @param tokenId The ID of the token to exit from\\n    function exit(uint256 tokenId) external nonReentrant {\\n        StakeInfo storage userStake = stakeInfo[tokenId][msg.sender];\\n        uint256 stakedAmount = userStake.amount;\\n        \\n        if (stakedAmount > 0) {\\n            // Update rewards for the user\\n            _updateReward(msg.sender, tokenId);\\n\\n            // Update stake info\\n            userStake.amount = 0;\\n            totalStaked[tokenId] -= stakedAmount;\\n\\n            // Transfer tokens back to user\\n            farmToken.safeTransferFrom(address(this), msg.sender, tokenId, stakedAmount, \\\"\\\");\\n\\n            emit Unstaked(msg.sender, tokenId, stakedAmount);\\n        }\\n\\n        // Claim rewards if any\\n        uint256 reward = userStake.rewards;\\n        if (reward > 0) {\\n            userStake.rewards = 0;\\n\\n            // Transfer rewards to user\\n            require(rewardToken.transfer(msg.sender, reward), \\\"FarmCityStaking: reward transfer failed\\\");\\n\\n            emit RewardClaimed(msg.sender, tokenId, reward);\\n        }\\n    }\\n\\n    // ================ Admin Functions ================\\n\\n    /// @notice Add rewards for a specific token ID\\n    /// @param tokenId The ID of the token to add rewards for\\n    /// @param amount The amount of reward tokens to add\\n    function addReward(uint256 tokenId, uint256 amount) external nonReentrant onlyOwner {\\n        require(amount > 0, \\\"FarmCityStaking: reward amount must be greater than 0\\\");\\n        require(totalStaked[tokenId] > 0, \\\"FarmCityStaking: no tokens staked for this ID\\\");\\n\\n        // Update reward for this token ID\\n        _updateRewardPerToken(tokenId);\\n\\n        // Calculate new reward rate\\n        uint256 duration = rewardDurationPerToken[tokenId];\\n        if (duration == 0) {\\n            duration = 7 days; // Default to 7 days if not set\\n            rewardDurationPerToken[tokenId] = duration;\\n        }\\n\\n        // If previous rewards haven't finished yet, add to them\\n        if (block.timestamp < rewardFinishTimePerToken[tokenId]) {\\n            uint256 remaining = rewardFinishTimePerToken[tokenId] - block.timestamp;\\n            uint256 leftover = remaining * rewardRatePerToken[tokenId];\\n            amount += leftover;\\n        }\\n\\n        rewardRatePerToken[tokenId] = amount / duration;\\n        lastUpdateTimePerToken[tokenId] = block.timestamp;\\n        rewardFinishTimePerToken[tokenId] = block.timestamp + duration;\\n\\n        // Transfer reward tokens from caller to this contract\\n        require(rewardToken.transferFrom(msg.sender, address(this), amount), \\\"FarmCityStaking: reward transfer failed\\\");\\n\\n        emit RewardAdded(tokenId, amount, duration);\\n    }\\n\\n    /// @notice Set the reward duration for a specific token ID\\n    /// @param tokenId The ID of the token to set the duration for\\n    /// @param duration The new duration in seconds\\n    function setRewardDuration(uint256 tokenId, uint256 duration) external onlyOwner {\\n        require(duration > 0, \\\"FarmCityStaking: reward duration must be greater than 0\\\");\\n        require(\\n            block.timestamp > rewardFinishTimePerToken[tokenId],\\n            \\\"FarmCityStaking: previous rewards period must be complete\\\"\\n        );\\n\\n        rewardDurationPerToken[tokenId] = duration;\\n\\n        emit RewardsDurationUpdated(tokenId, duration);\\n    }\\n\\n    /// @notice Pause staking\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause staking\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Recover ERC20 tokens sent to this contract by mistake\\n    /// @param tokenAddress The address of the token to recover\\n    /// @param amount The amount of tokens to recover\\n    function recoverERC20(address tokenAddress, uint256 amount) external onlyOwner {\\n        require(tokenAddress != address(rewardToken), \\\"FarmCityStaking: cannot recover reward token\\\");\\n\\n        IERC20(tokenAddress).transfer(owner(), amount);\\n\\n        emit RecoveredERC20(tokenAddress, amount);\\n    }\\n\\n    /// @notice Recover ERC1155 tokens sent to this contract by mistake\\n    /// @param tokenAddress The address of the token to recover\\n    /// @param tokenId The ID of the token to recover\\n    /// @param amount The amount of tokens to recover\\n    function recoverERC1155(address tokenAddress, uint256 tokenId, uint256 amount) external onlyOwner {\\n        require(\\n            tokenAddress != address(farmToken) || totalStaked[tokenId] < amount,\\n            \\\"FarmCityStaking: cannot recover staked tokens\\\"\\n        );\\n\\n        IERC1155(tokenAddress).safeTransferFrom(address(this), owner(), tokenId, amount, \\\"\\\");\\n\\n        emit RecoveredERC1155(tokenAddress, tokenId, amount);\\n    }\\n\\n    // ================ View Functions ================\\n\\n    /// @notice Get the last time rewards were applicable for a token ID\\n    /// @param tokenId The ID of the token\\n    /// @return The timestamp when rewards were last applicable\\n    function lastTimeRewardApplicable(uint256 tokenId) public view returns (uint256) {\\n        return block.timestamp < rewardFinishTimePerToken[tokenId] ? block.timestamp : rewardFinishTimePerToken[tokenId];\\n    }\\n\\n    /// @notice Calculate the current reward per token for a specific token ID\\n    /// @param tokenId The ID of the token\\n    /// @return The current reward per token\\n    function rewardPerToken(uint256 tokenId) public view returns (uint256) {\\n        if (totalStaked[tokenId] == 0) {\\n            return rewardPerTokenStored[tokenId];\\n        }\\n\\n        uint256 lastTimeApplicable = lastTimeRewardApplicable(tokenId);\\n        uint256 timeElapsed = lastTimeApplicable - lastUpdateTimePerToken[tokenId];\\n\\n        return rewardPerTokenStored[tokenId]\\n            + ((timeElapsed * rewardRatePerToken[tokenId] * PRECISION_FACTOR) / totalStaked[tokenId]);\\n    }\\n\\n    /// @notice Calculate the earned rewards for a user and token ID\\n    /// @param account The address of the user\\n    /// @param tokenId The ID of the token\\n    /// @return The earned rewards\\n    function earned(address account, uint256 tokenId) public view returns (uint256) {\\n        StakeInfo storage userStake = stakeInfo[tokenId][account];\\n\\n        uint256 currentRewardPerToken = rewardPerToken(tokenId);\\n        uint256 rewardDelta = currentRewardPerToken - userStake.rewardPerTokenPaid;\\n        uint256 newRewards = (userStake.amount * rewardDelta) / PRECISION_FACTOR;\\n\\n        return userStake.rewards + newRewards;\\n    }\\n\\n    /// @notice Get the reward rate for a specific token ID\\n    /// @param tokenId The ID of the token\\n    /// @return The reward rate (tokens per second)\\n    function getRewardRate(uint256 tokenId) external view returns (uint256) {\\n        return rewardRatePerToken[tokenId];\\n    }\\n\\n    /// @notice Get the staked amount for a user and token ID\\n    /// @param account The address of the user\\n    /// @param tokenId The ID of the token\\n    /// @return The staked amount\\n    function getStakedAmount(address account, uint256 tokenId) external view returns (uint256) {\\n        return stakeInfo[tokenId][account].amount;\\n    }\\n\\n    /// @notice Get the total staked amount for a token ID\\n    /// @param tokenId The ID of the token\\n    /// @return The total staked amount\\n    function getTotalStaked(uint256 tokenId) external view returns (uint256) {\\n        return totalStaked[tokenId];\\n    }\\n\\n    /// @notice Get the reward finish time for a token ID\\n    /// @param tokenId The ID of the token\\n    /// @return The reward finish time\\n    function getRewardFinishTime(uint256 tokenId) external view returns (uint256) {\\n        return rewardFinishTimePerToken[tokenId];\\n    }\\n\\n    // ================ Internal Functions ================\\n\\n    /// @notice Update reward for a specific user and token ID\\n    /// @param account The address of the user\\n    /// @param tokenId The ID of the token\\n    function _updateReward(address account, uint256 tokenId) internal {\\n        // Update reward per token for this token ID\\n        _updateRewardPerToken(tokenId);\\n\\n        // Update user's rewards\\n        StakeInfo storage userStake = stakeInfo[tokenId][account];\\n\\n        if (account != address(0)) {\\n            userStake.rewards = earned(account, tokenId);\\n            userStake.rewardPerTokenPaid = rewardPerTokenStored[tokenId];\\n            userStake.lastUpdateTime = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Update reward per token for a specific token ID\\n    /// @param tokenId The ID of the token\\n    function _updateRewardPerToken(uint256 tokenId) internal {\\n        rewardPerTokenStored[tokenId] = rewardPerToken(tokenId);\\n        lastUpdateTimePerToken[tokenId] = lastTimeRewardApplicable(tokenId);\\n    }\\n\\n    // ================ UUPS Upgrade ================\\n\\n    /// @notice Authorize an upgrade\\n    /// @param newImplementation The address of the new implementation\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    // ================ ERC1155Receiver Implementation ================\\n\\n    /// @notice Handle the receipt of a single ERC1155 token type\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata)\\n        external\\n        pure\\n        override\\n        returns (bytes4)\\n    {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @notice Handle the receipt of multiple ERC1155 token types\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata)\\n        external\\n        pure\\n        override\\n        returns (bytes4)\\n    {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @notice Check if the contract supports an interface\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe4a49bfcfdaf337b625b1cfb6acf543dd346a5905f2bcb9e51e4ae99a85af399\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcc09253e554d7e477457590e45a6e74421b7ad0a27c15e41e5e6cbe4c05e467f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101de565b600061006761015b60201b60201c565b90508060000160089054906101000a900460ff16156100b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101585767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161014f91906101c3565b60405180910390a15b50565b60008061016c61017560201b60201c565b90508091505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b600067ffffffffffffffff82169050919050565b6101bd816101a0565b82525050565b60006020820190506101d860008301846101b4565b92915050565b6080516144d6610207600039600081816125490152818161259e015261275901526144d66000f3fe6080604052600436106102255760003560e01c8063874c120b11610123578063c0c53b8b116100ab578063e9d67b131161006f578063e9d67b1314610855578063eeca156214610892578063f23a6e61146108cf578063f2fde38b1461090c578063f7c618c11461093557610225565b8063c0c53b8b1461075e578063c2442f9314610787578063cbaa1d9b146107b2578063dbcfa1db146107db578063e57dd4c71461081857610225565b80639e2c8a5b116100f25780639e2c8a5b14610667578063a651356214610690578063ad3cb1cc146106cd578063ae169a50146106f8578063bc197c811461072157610225565b8063874c120b14610599578063882324b4146105d65780638980f11f146106135780638da5cb5b1461063c57610225565b806352d1902d116101b15780637584f914116101755780637584f914146104c757806375c93bb9146105075780637b0472f0146105305780637f8661a1146105595780638456cb591461058257610225565b806352d1902d146104085780635c975abb146104335780635d835ae71461045e5780635eac623914610487578063715018a6146104b057610225565b80633e491d47116101f85780633e491d471461031e5780633f4ba83a1461035b57806341cb8c20146103725780634a84c9ee146103af5780634f1ef286146103ec57610225565b806301ffc9a71461022a5780631d971e2414610267578063210a02ce146102a45780632f8899f3146102e1575b600080fd5b34801561023657600080fd5b50610251600480360381019061024c91906130d4565b610960565b60405161025e919061311c565b60405180910390f35b34801561027357600080fd5b5061028e6004803603810190610289919061316d565b6109da565b60405161029b91906131a9565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061316d565b6109f2565b6040516102d891906131a9565b60405180910390f35b3480156102ed57600080fd5b506103086004803603810190610303919061316d565b610a0f565b60405161031591906131a9565b60405180910390f35b34801561032a57600080fd5b5061034560048036038101906103409190613222565b610a2c565b60405161035291906131a9565b60405180910390f35b34801561036757600080fd5b50610370610ae5565b005b34801561037e57600080fd5b506103996004803603810190610394919061316d565b610af7565b6040516103a691906131a9565b60405180910390f35b3480156103bb57600080fd5b506103d660048036038101906103d19190613222565b610b0f565b6040516103e391906131a9565b60405180910390f35b610406600480360381019061040191906133a8565b610b6d565b005b34801561041457600080fd5b5061041d610b8c565b60405161042a919061341d565b60405180910390f35b34801561043f57600080fd5b50610448610bbf565b604051610455919061311c565b60405180910390f35b34801561046a57600080fd5b5061048560048036038101906104809190613438565b610be4565b005b34801561049357600080fd5b506104ae60048036038101906104a991906134d8565b610cd8565b005b3480156104bc57600080fd5b506104c5610eec565b005b3480156104d357600080fd5b506104ee60048036038101906104e99190613525565b610f00565b6040516104fe9493929190613565565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190613438565b610f3d565b005b34801561053c57600080fd5b5061055760048036038101906105529190613438565b611226565b005b34801561056557600080fd5b50610580600480360381019061057b919061316d565b611403565b005b34801561058e57600080fd5b506105976116e9565b005b3480156105a557600080fd5b506105c060048036038101906105bb919061316d565b6116fb565b6040516105cd91906131a9565b60405180910390f35b3480156105e257600080fd5b506105fd60048036038101906105f8919061316d565b6117da565b60405161060a91906131a9565b60405180910390f35b34801561061f57600080fd5b5061063a60048036038101906106359190613222565b6117f2565b005b34801561064857600080fd5b50610651611962565b60405161065e91906135b9565b60405180910390f35b34801561067357600080fd5b5061068e60048036038101906106899190613438565b61199a565b005b34801561069c57600080fd5b506106b760048036038101906106b2919061316d565b611bbc565b6040516106c491906131a9565b60405180910390f35b3480156106d957600080fd5b506106e2611bd9565b6040516106ef9190613653565b60405180910390f35b34801561070457600080fd5b5061071f600480360381019061071a919061316d565b611c12565b005b34801561072d57600080fd5b50610748600480360381019061074391906136cb565b611dd0565b60405161075591906137b6565b60405180910390f35b34801561076a57600080fd5b50610785600480360381019061078091906137d1565b611de8565b005b34801561079357600080fd5b5061079c6120f8565b6040516107a99190613883565b60405180910390f35b3480156107be57600080fd5b506107d960048036038101906107d4919061389e565b61211c565b005b3480156107e757600080fd5b5061080260048036038101906107fd919061316d565b61229c565b60405161080f91906131a9565b60405180910390f35b34801561082457600080fd5b5061083f600480360381019061083a919061316d565b6122b4565b60405161084c91906131a9565b60405180910390f35b34801561086157600080fd5b5061087c6004803603810190610877919061316d565b6122cc565b60405161088991906131a9565b60405180910390f35b34801561089e57600080fd5b506108b960048036038101906108b4919061316d565b6122e4565b6040516108c691906131a9565b60405180910390f35b3480156108db57600080fd5b506108f660048036038101906108f191906138f1565b612322565b60405161090391906137b6565b60405180910390f35b34801561091857600080fd5b50610933600480360381019061092e919061398b565b612338565b005b34801561094157600080fd5b5061094a6123be565b60405161095791906139d9565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109d357506109d2826123e4565b5b9050919050565b60086020528060005260406000206000915090505481565b600060086000838152602001908152602001600020549050919050565b600060036000838152602001908152602001600020549050919050565b6000806002600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610a8c846116fb565b90506000826001015482610aa09190613a23565b90506000670de0b6b3a7640000828560000154610abd9190613a57565b610ac79190613ac8565b9050808460020154610ad99190613af9565b94505050505092915050565b610aed61244e565b610af56124d5565b565b60036020528060005260406000206000915090505481565b60006002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905092915050565b610b75612547565b610b7e8261262d565b610b888282612638565b5050565b6000610b96612757565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600080610bca6127de565b90508060000160009054906101000a900460ff1691505090565b610bec61244e565b60008111610c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2690613b9f565b60405180910390fd5b60086000838152602001908152602001600020544211610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90613c31565b60405180910390fd5b806007600084815260200190815260200160002081905550817fd20a04eb2807bde8cbdf16ef27a46d94a3162d81818f1781c0fe4ed9194ca39182604051610ccc91906131a9565b60405180910390a25050565b610ce0612806565b6000805b83839050811015610df5576000848483818110610d0457610d03613c51565b5b905060200201359050610d17338261285d565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816002015490506000811115610de557600082600201819055508085610d939190613af9565b9450823373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174383604051610ddc91906131a9565b60405180910390a35b5050508080600101915050610ce4565b506000811115610edf57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e5c929190613c80565b6020604051808303816000875af1158015610e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9f9190613cd5565b610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed590613d74565b60405180910390fd5b5b50610ee861292b565b5050565b610ef461244e565b610efe6000612944565b565b6002602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b610f45612806565b610f4d61244e565b60008111610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8790613e06565b60405180910390fd5b6000600360008481526020019081526020016000205411610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90613e98565b60405180910390fd5b610fef82612a1b565b6000600760008481526020019081526020016000205490506000810361102e5762093a8090508060076000858152602001908152602001600020819055505b60086000848152602001908152602001600020544210156110a057600042600860008681526020019081526020016000205461106a9190613a23565b9050600060066000868152602001908152602001600020548261108d9190613a57565b9050808461109b9190613af9565b935050505b80826110ac9190613ac8565b600660008581526020019081526020016000208190555042600560008581526020019081526020016000208190555080426110e79190613af9565b6008600085815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161115d93929190613eb8565b6020604051808303816000875af115801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613cd5565b6111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d690613d74565b60405180910390fd5b827f9795f222c951ae3e749f872dbe287f78d21fa52353e9175cb20ed3aa2b29b82b8383604051611211929190613eef565b60405180910390a25061122261292b565b5050565b61122e612806565b611236612a5e565b60008111611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127090613f64565b60405180910390fd5b611283338361285d565b806002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546112e69190613af9565b92505081905550806003600084815260200190815260200160002060008282546113109190613af9565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a333085856040518563ffffffff1660e01b81526004016113769493929190613fbb565b600060405180830381600087803b15801561139057600080fd5b505af11580156113a4573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90836040516113ef91906131a9565b60405180910390a36113ff61292b565b5050565b61140b612806565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008111156115905761147b338461285d565b60008260000181905550806003600085815260200190815260200160002060008282546114a89190613a23565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a303386856040518563ffffffff1660e01b815260040161150e9493929190613fbb565b600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e8360405161158791906131a9565b60405180910390a35b60008260020154905060008111156116db5760008360020181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611609929190613c80565b6020604051808303816000875af1158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c9190613cd5565b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168290613d74565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e2731743836040516116d291906131a9565b60405180910390a35b5050506116e661292b565b50565b6116f161244e565b6116f9612a9f565b565b60008060036000848152602001908152602001600020540361173257600460008381526020019081526020016000205490506117d5565b600061173d836122e4565b905060006005600085815260200190815260200160002054826117609190613a23565b90506003600085815260200190815260200160002054670de0b6b3a764000060066000878152602001908152602001600020548361179e9190613a57565b6117a89190613a57565b6117b29190613ac8565b60046000868152602001908152602001600020546117d09190613af9565b925050505b919050565b60046020528060005260406000206000915090505481565b6117fa61244e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190614085565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6118ae611962565b836040518363ffffffff1660e01b81526004016118cc929190613c80565b6020604051808303816000875af11580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190613cd5565b508173ffffffffffffffffffffffffffffffffffffffff167f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b18260405161195691906131a9565b60405180910390a25050565b60008061196d612b11565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6119a2612806565b600081116119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc90614117565b60405180910390fd5b60006002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015611a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a77906141a9565b60405180910390fd5b611a8a338461285d565b81816000016000828254611a9e9190613a23565b9250508190555081600360008581526020019081526020016000206000828254611ac89190613a23565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a303386866040518563ffffffff1660e01b8152600401611b2e9493929190613fbb565b600060405180830381600087803b158015611b4857600080fd5b505af1158015611b5c573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051611ba791906131a9565b60405180910390a350611bb861292b565b5050565b600060066000838152602001908152602001600020549050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b611c1a612806565b611c24338261285d565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816002015490506000811115611dc35760008260020181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611cf1929190613c80565b6020604051808303816000875af1158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d349190613cd5565b611d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6a90613d74565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174383604051611dba91906131a9565b60405180910390a35b5050611dcd61292b565b50565b600063bc197c8160e01b905098975050505050505050565b6000611df2612b39565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015611e405750825b9050600060018367ffffffffffffffff16148015611e75575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611e83575080155b15611eba576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315611f0a5760018560000160086101000a81548160ff0219169083151502179055505b611f12612b4d565b611f1b86612b5f565b611f23612b73565b611f2b612b7d565b611f33612b87565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603611fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f999061423b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603612011576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612008906142cd565b60405180910390fd5b876000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156120ee5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516120e5919061433c565b60405180910390a15b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61212461244e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806121915750806003600084815260200190815260200160002054105b6121d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c7906143c9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663f242432a306121f5611962565b85856040518563ffffffff1660e01b81526004016122169493929190613fbb565b600060405180830381600087803b15801561223057600080fd5b505af1158015612244573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167e04b148840595eb234e6148251c2c9c78d692171f32febbd992963e0c138553838360405161228f929190613eef565b60405180910390a2505050565b60066020528060005260406000206000915090505481565b60076020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b60006008600083815260200190815260200160002054421061231957600860008381526020019081526020016000205461231b565b425b9050919050565b600063f23a6e6160e01b90509695505050505050565b61234061244e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123b25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016123a991906135b9565b60405180910390fd5b6123bb81612944565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612456612b91565b73ffffffffffffffffffffffffffffffffffffffff16612474611962565b73ffffffffffffffffffffffffffffffffffffffff16146124d357612497612b91565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124ca91906135b9565b60405180910390fd5b565b6124dd612b99565b60006124e76127de565b905060008160000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61252f612b91565b60405161253c91906135b9565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614806125f457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125db612bd9565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561262b576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61263561244e565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156126a057506040513d601f19601f8201168201806040525081019061269d9190614415565b60015b6126e157816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016126d891906135b9565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461274857806040517faa1d49a400000000000000000000000000000000000000000000000000000000815260040161273f919061341d565b60405180910390fd5b6127528383612c30565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146127dc576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b6000612810612ca3565b90506002816000015403612850576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b61286681612a1b565b60006002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612926576128f88383610a2c565b8160020181905550600460008381526020019081526020016000205481600101819055504281600301819055505b505050565b6000612935612ca3565b90506001816000018190555050565b600061294e612b11565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b612a24816116fb565b6004600083815260200190815260200160002081905550612a44816122e4565b600560008381526020019081526020016000208190555050565b612a66610bbf565b15612a9d576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612aa7612a5e565b6000612ab16127de565b905060018160000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af9612b91565b604051612b0691906135b9565b60405180910390a150565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080612b44612ccb565b90508091505090565b612b55612cf6565b612b5d612d36565b565b612b67612cf6565b612b7081612d57565b50565b612b7b612cf6565b565b612b85612cf6565b565b612b8f612cf6565b565b600033905090565b612ba1610bbf565b612bd7576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612c077f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612ddd565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612c3982612de7565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612c9657612c908282612eb4565b50612c9f565b612c9e612f38565b5b5050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b612cfe612f75565b612d34576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612d3e612cf6565b6000612d48612ca3565b90506001816000018190555050565b612d5f612cf6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612dd15760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612dc891906135b9565b60405180910390fd5b612dda81612944565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612e4357806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612e3a91906135b9565b60405180910390fd5b80612e707f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612ddd565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612ede9190614489565b600060405180830381855af49150503d8060008114612f19576040519150601f19603f3d011682016040523d82523d6000602084013e612f1e565b606091505b5091509150612f2e858383612f95565b9250505092915050565b6000341115612f73576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f7f612b39565b60000160089054906101000a900460ff16905090565b606082612faa57612fa582613024565b61301c565b60008251148015612fd2575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561301457836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161300b91906135b9565b60405180910390fd5b81905061301d565b5b9392505050565b60008151111561303657805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130b18161307c565b81146130bc57600080fd5b50565b6000813590506130ce816130a8565b92915050565b6000602082840312156130ea576130e9613072565b5b60006130f8848285016130bf565b91505092915050565b60008115159050919050565b61311681613101565b82525050565b6000602082019050613131600083018461310d565b92915050565b6000819050919050565b61314a81613137565b811461315557600080fd5b50565b60008135905061316781613141565b92915050565b60006020828403121561318357613182613072565b5b600061319184828501613158565b91505092915050565b6131a381613137565b82525050565b60006020820190506131be600083018461319a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131ef826131c4565b9050919050565b6131ff816131e4565b811461320a57600080fd5b50565b60008135905061321c816131f6565b92915050565b6000806040838503121561323957613238613072565b5b60006132478582860161320d565b925050602061325885828601613158565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132b58261326c565b810181811067ffffffffffffffff821117156132d4576132d361327d565b5b80604052505050565b60006132e7613068565b90506132f382826132ac565b919050565b600067ffffffffffffffff8211156133135761331261327d565b5b61331c8261326c565b9050602081019050919050565b82818337600083830152505050565b600061334b613346846132f8565b6132dd565b90508281526020810184848401111561336757613366613267565b5b613372848285613329565b509392505050565b600082601f83011261338f5761338e613262565b5b813561339f848260208601613338565b91505092915050565b600080604083850312156133bf576133be613072565b5b60006133cd8582860161320d565b925050602083013567ffffffffffffffff8111156133ee576133ed613077565b5b6133fa8582860161337a565b9150509250929050565b6000819050919050565b61341781613404565b82525050565b6000602082019050613432600083018461340e565b92915050565b6000806040838503121561344f5761344e613072565b5b600061345d85828601613158565b925050602061346e85828601613158565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261349857613497613262565b5b8235905067ffffffffffffffff8111156134b5576134b4613478565b5b6020830191508360208202830111156134d1576134d061347d565b5b9250929050565b600080602083850312156134ef576134ee613072565b5b600083013567ffffffffffffffff81111561350d5761350c613077565b5b61351985828601613482565b92509250509250929050565b6000806040838503121561353c5761353b613072565b5b600061354a85828601613158565b925050602061355b8582860161320d565b9150509250929050565b600060808201905061357a600083018761319a565b613587602083018661319a565b613594604083018561319a565b6135a1606083018461319a565b95945050505050565b6135b3816131e4565b82525050565b60006020820190506135ce60008301846135aa565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561360e5780820151818401526020810190506135f3565b60008484015250505050565b6000613625826135d4565b61362f81856135df565b935061363f8185602086016135f0565b6136488161326c565b840191505092915050565b6000602082019050818103600083015261366d818461361a565b905092915050565b60008083601f84011261368b5761368a613262565b5b8235905067ffffffffffffffff8111156136a8576136a7613478565b5b6020830191508360018202830111156136c4576136c361347d565b5b9250929050565b60008060008060008060008060a0898b0312156136eb576136ea613072565b5b60006136f98b828c0161320d565b985050602061370a8b828c0161320d565b975050604089013567ffffffffffffffff81111561372b5761372a613077565b5b6137378b828c01613482565b9650965050606089013567ffffffffffffffff81111561375a57613759613077565b5b6137668b828c01613482565b9450945050608089013567ffffffffffffffff81111561378957613788613077565b5b6137958b828c01613675565b92509250509295985092959890939650565b6137b08161307c565b82525050565b60006020820190506137cb60008301846137a7565b92915050565b6000806000606084860312156137ea576137e9613072565b5b60006137f88682870161320d565b93505060206138098682870161320d565b925050604061381a8682870161320d565b9150509250925092565b6000819050919050565b600061384961384461383f846131c4565b613824565b6131c4565b9050919050565b600061385b8261382e565b9050919050565b600061386d82613850565b9050919050565b61387d81613862565b82525050565b60006020820190506138986000830184613874565b92915050565b6000806000606084860312156138b7576138b6613072565b5b60006138c58682870161320d565b93505060206138d686828701613158565b92505060406138e786828701613158565b9150509250925092565b60008060008060008060a0878903121561390e5761390d613072565b5b600061391c89828a0161320d565b965050602061392d89828a0161320d565b955050604061393e89828a01613158565b945050606061394f89828a01613158565b935050608087013567ffffffffffffffff8111156139705761396f613077565b5b61397c89828a01613675565b92509250509295509295509295565b6000602082840312156139a1576139a0613072565b5b60006139af8482850161320d565b91505092915050565b60006139c382613850565b9050919050565b6139d3816139b8565b82525050565b60006020820190506139ee60008301846139ca565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a2e82613137565b9150613a3983613137565b9250828203905081811115613a5157613a506139f4565b5b92915050565b6000613a6282613137565b9150613a6d83613137565b9250828202613a7b81613137565b91508282048414831517613a9257613a916139f4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ad382613137565b9150613ade83613137565b925082613aee57613aed613a99565b5b828204905092915050565b6000613b0482613137565b9150613b0f83613137565b9250828201905080821115613b2757613b266139f4565b5b92915050565b7f4661726d436974795374616b696e673a20726577617264206475726174696f6e60008201527f206d7573742062652067726561746572207468616e2030000000000000000000602082015250565b6000613b896037836135df565b9150613b9482613b2d565b604082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b7f4661726d436974795374616b696e673a2070726576696f75732072657761726460008201527f7320706572696f64206d75737420626520636f6d706c65746500000000000000602082015250565b6000613c1b6039836135df565b9150613c2682613bbf565b604082019050919050565b60006020820190508181036000830152613c4a81613c0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613c9560008301856135aa565b613ca2602083018461319a565b9392505050565b613cb281613101565b8114613cbd57600080fd5b50565b600081519050613ccf81613ca9565b92915050565b600060208284031215613ceb57613cea613072565b5b6000613cf984828501613cc0565b91505092915050565b7f4661726d436974795374616b696e673a20726577617264207472616e7366657260008201527f206661696c656400000000000000000000000000000000000000000000000000602082015250565b6000613d5e6027836135df565b9150613d6982613d02565b604082019050919050565b60006020820190508181036000830152613d8d81613d51565b9050919050565b7f4661726d436974795374616b696e673a2072657761726420616d6f756e74206d60008201527f7573742062652067726561746572207468616e20300000000000000000000000602082015250565b6000613df06035836135df565b9150613dfb82613d94565b604082019050919050565b60006020820190508181036000830152613e1f81613de3565b9050919050565b7f4661726d436974795374616b696e673a206e6f20746f6b656e73207374616b6560008201527f6420666f72207468697320494400000000000000000000000000000000000000602082015250565b6000613e82602d836135df565b9150613e8d82613e26565b604082019050919050565b60006020820190508181036000830152613eb181613e75565b9050919050565b6000606082019050613ecd60008301866135aa565b613eda60208301856135aa565b613ee7604083018461319a565b949350505050565b6000604082019050613f04600083018561319a565b613f11602083018461319a565b9392505050565b7f4661726d436974795374616b696e673a2063616e6e6f74207374616b65203000600082015250565b6000613f4e601f836135df565b9150613f5982613f18565b602082019050919050565b60006020820190508181036000830152613f7d81613f41565b9050919050565b600082825260208201905092915050565b50565b6000613fa5600083613f84565b9150613fb082613f95565b600082019050919050565b600060a082019050613fd060008301876135aa565b613fdd60208301866135aa565b613fea604083018561319a565b613ff7606083018461319a565b818103608083015261400881613f98565b905095945050505050565b7f4661726d436974795374616b696e673a2063616e6e6f74207265636f7665722060008201527f72657761726420746f6b656e0000000000000000000000000000000000000000602082015250565b600061406f602c836135df565b915061407a82614013565b604082019050919050565b6000602082019050818103600083015261409e81614062565b9050919050565b7f4661726d436974795374616b696e673a2063616e6e6f7420756e7374616b652060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b60006141016021836135df565b915061410c826140a5565b604082019050919050565b60006020820190508181036000830152614130816140f4565b9050919050565b7f4661726d436974795374616b696e673a20756e7374616b6520616d6f756e742060008201527f657863656564732062616c616e63650000000000000000000000000000000000602082015250565b6000614193602f836135df565b915061419e82614137565b604082019050919050565b600060208201905081810360008301526141c281614186565b9050919050565b7f4661726d436974795374616b696e673a206661726d20746f6b656e206973207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614225602b836135df565b9150614230826141c9565b604082019050919050565b6000602082019050818103600083015261425481614218565b9050919050565b7f4661726d436974795374616b696e673a2072657761726420746f6b656e20697360008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b60006142b7602d836135df565b91506142c28261425b565b604082019050919050565b600060208201905081810360008301526142e6816142aa565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061432661432161431c846142ed565b613824565b6142f7565b9050919050565b6143368161430b565b82525050565b6000602082019050614351600083018461432d565b92915050565b7f4661726d436974795374616b696e673a2063616e6e6f74207265636f7665722060008201527f7374616b656420746f6b656e7300000000000000000000000000000000000000602082015250565b60006143b3602d836135df565b91506143be82614357565b604082019050919050565b600060208201905081810360008301526143e2816143a6565b9050919050565b6143f281613404565b81146143fd57600080fd5b50565b60008151905061440f816143e9565b92915050565b60006020828403121561442b5761442a613072565b5b600061443984828501614400565b91505092915050565b600081519050919050565b600081905092915050565b600061446382614442565b61446d818561444d565b935061447d8185602086016135f0565b80840191505092915050565b60006144958284614458565b91508190509291505056fea26469706673582212208228e6ed155273e3785c2a1087b0cc11388b215dcd8ab6b2ef6fc9686323923c64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c8063874c120b11610123578063c0c53b8b116100ab578063e9d67b131161006f578063e9d67b1314610855578063eeca156214610892578063f23a6e61146108cf578063f2fde38b1461090c578063f7c618c11461093557610225565b8063c0c53b8b1461075e578063c2442f9314610787578063cbaa1d9b146107b2578063dbcfa1db146107db578063e57dd4c71461081857610225565b80639e2c8a5b116100f25780639e2c8a5b14610667578063a651356214610690578063ad3cb1cc146106cd578063ae169a50146106f8578063bc197c811461072157610225565b8063874c120b14610599578063882324b4146105d65780638980f11f146106135780638da5cb5b1461063c57610225565b806352d1902d116101b15780637584f914116101755780637584f914146104c757806375c93bb9146105075780637b0472f0146105305780637f8661a1146105595780638456cb591461058257610225565b806352d1902d146104085780635c975abb146104335780635d835ae71461045e5780635eac623914610487578063715018a6146104b057610225565b80633e491d47116101f85780633e491d471461031e5780633f4ba83a1461035b57806341cb8c20146103725780634a84c9ee146103af5780634f1ef286146103ec57610225565b806301ffc9a71461022a5780631d971e2414610267578063210a02ce146102a45780632f8899f3146102e1575b600080fd5b34801561023657600080fd5b50610251600480360381019061024c91906130d4565b610960565b60405161025e919061311c565b60405180910390f35b34801561027357600080fd5b5061028e6004803603810190610289919061316d565b6109da565b60405161029b91906131a9565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061316d565b6109f2565b6040516102d891906131a9565b60405180910390f35b3480156102ed57600080fd5b506103086004803603810190610303919061316d565b610a0f565b60405161031591906131a9565b60405180910390f35b34801561032a57600080fd5b5061034560048036038101906103409190613222565b610a2c565b60405161035291906131a9565b60405180910390f35b34801561036757600080fd5b50610370610ae5565b005b34801561037e57600080fd5b506103996004803603810190610394919061316d565b610af7565b6040516103a691906131a9565b60405180910390f35b3480156103bb57600080fd5b506103d660048036038101906103d19190613222565b610b0f565b6040516103e391906131a9565b60405180910390f35b610406600480360381019061040191906133a8565b610b6d565b005b34801561041457600080fd5b5061041d610b8c565b60405161042a919061341d565b60405180910390f35b34801561043f57600080fd5b50610448610bbf565b604051610455919061311c565b60405180910390f35b34801561046a57600080fd5b5061048560048036038101906104809190613438565b610be4565b005b34801561049357600080fd5b506104ae60048036038101906104a991906134d8565b610cd8565b005b3480156104bc57600080fd5b506104c5610eec565b005b3480156104d357600080fd5b506104ee60048036038101906104e99190613525565b610f00565b6040516104fe9493929190613565565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190613438565b610f3d565b005b34801561053c57600080fd5b5061055760048036038101906105529190613438565b611226565b005b34801561056557600080fd5b50610580600480360381019061057b919061316d565b611403565b005b34801561058e57600080fd5b506105976116e9565b005b3480156105a557600080fd5b506105c060048036038101906105bb919061316d565b6116fb565b6040516105cd91906131a9565b60405180910390f35b3480156105e257600080fd5b506105fd60048036038101906105f8919061316d565b6117da565b60405161060a91906131a9565b60405180910390f35b34801561061f57600080fd5b5061063a60048036038101906106359190613222565b6117f2565b005b34801561064857600080fd5b50610651611962565b60405161065e91906135b9565b60405180910390f35b34801561067357600080fd5b5061068e60048036038101906106899190613438565b61199a565b005b34801561069c57600080fd5b506106b760048036038101906106b2919061316d565b611bbc565b6040516106c491906131a9565b60405180910390f35b3480156106d957600080fd5b506106e2611bd9565b6040516106ef9190613653565b60405180910390f35b34801561070457600080fd5b5061071f600480360381019061071a919061316d565b611c12565b005b34801561072d57600080fd5b50610748600480360381019061074391906136cb565b611dd0565b60405161075591906137b6565b60405180910390f35b34801561076a57600080fd5b50610785600480360381019061078091906137d1565b611de8565b005b34801561079357600080fd5b5061079c6120f8565b6040516107a99190613883565b60405180910390f35b3480156107be57600080fd5b506107d960048036038101906107d4919061389e565b61211c565b005b3480156107e757600080fd5b5061080260048036038101906107fd919061316d565b61229c565b60405161080f91906131a9565b60405180910390f35b34801561082457600080fd5b5061083f600480360381019061083a919061316d565b6122b4565b60405161084c91906131a9565b60405180910390f35b34801561086157600080fd5b5061087c6004803603810190610877919061316d565b6122cc565b60405161088991906131a9565b60405180910390f35b34801561089e57600080fd5b506108b960048036038101906108b4919061316d565b6122e4565b6040516108c691906131a9565b60405180910390f35b3480156108db57600080fd5b506108f660048036038101906108f191906138f1565b612322565b60405161090391906137b6565b60405180910390f35b34801561091857600080fd5b50610933600480360381019061092e919061398b565b612338565b005b34801561094157600080fd5b5061094a6123be565b60405161095791906139d9565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109d357506109d2826123e4565b5b9050919050565b60086020528060005260406000206000915090505481565b600060086000838152602001908152602001600020549050919050565b600060036000838152602001908152602001600020549050919050565b6000806002600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610a8c846116fb565b90506000826001015482610aa09190613a23565b90506000670de0b6b3a7640000828560000154610abd9190613a57565b610ac79190613ac8565b9050808460020154610ad99190613af9565b94505050505092915050565b610aed61244e565b610af56124d5565b565b60036020528060005260406000206000915090505481565b60006002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905092915050565b610b75612547565b610b7e8261262d565b610b888282612638565b5050565b6000610b96612757565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600080610bca6127de565b90508060000160009054906101000a900460ff1691505090565b610bec61244e565b60008111610c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2690613b9f565b60405180910390fd5b60086000838152602001908152602001600020544211610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90613c31565b60405180910390fd5b806007600084815260200190815260200160002081905550817fd20a04eb2807bde8cbdf16ef27a46d94a3162d81818f1781c0fe4ed9194ca39182604051610ccc91906131a9565b60405180910390a25050565b610ce0612806565b6000805b83839050811015610df5576000848483818110610d0457610d03613c51565b5b905060200201359050610d17338261285d565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816002015490506000811115610de557600082600201819055508085610d939190613af9565b9450823373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174383604051610ddc91906131a9565b60405180910390a35b5050508080600101915050610ce4565b506000811115610edf57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e5c929190613c80565b6020604051808303816000875af1158015610e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9f9190613cd5565b610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed590613d74565b60405180910390fd5b5b50610ee861292b565b5050565b610ef461244e565b610efe6000612944565b565b6002602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b610f45612806565b610f4d61244e565b60008111610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8790613e06565b60405180910390fd5b6000600360008481526020019081526020016000205411610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90613e98565b60405180910390fd5b610fef82612a1b565b6000600760008481526020019081526020016000205490506000810361102e5762093a8090508060076000858152602001908152602001600020819055505b60086000848152602001908152602001600020544210156110a057600042600860008681526020019081526020016000205461106a9190613a23565b9050600060066000868152602001908152602001600020548261108d9190613a57565b9050808461109b9190613af9565b935050505b80826110ac9190613ac8565b600660008581526020019081526020016000208190555042600560008581526020019081526020016000208190555080426110e79190613af9565b6008600085815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161115d93929190613eb8565b6020604051808303816000875af115801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613cd5565b6111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d690613d74565b60405180910390fd5b827f9795f222c951ae3e749f872dbe287f78d21fa52353e9175cb20ed3aa2b29b82b8383604051611211929190613eef565b60405180910390a25061122261292b565b5050565b61122e612806565b611236612a5e565b60008111611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127090613f64565b60405180910390fd5b611283338361285d565b806002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546112e69190613af9565b92505081905550806003600084815260200190815260200160002060008282546113109190613af9565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a333085856040518563ffffffff1660e01b81526004016113769493929190613fbb565b600060405180830381600087803b15801561139057600080fd5b505af11580156113a4573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90836040516113ef91906131a9565b60405180910390a36113ff61292b565b5050565b61140b612806565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008111156115905761147b338461285d565b60008260000181905550806003600085815260200190815260200160002060008282546114a89190613a23565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a303386856040518563ffffffff1660e01b815260040161150e9493929190613fbb565b600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e8360405161158791906131a9565b60405180910390a35b60008260020154905060008111156116db5760008360020181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611609929190613c80565b6020604051808303816000875af1158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c9190613cd5565b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168290613d74565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e2731743836040516116d291906131a9565b60405180910390a35b5050506116e661292b565b50565b6116f161244e565b6116f9612a9f565b565b60008060036000848152602001908152602001600020540361173257600460008381526020019081526020016000205490506117d5565b600061173d836122e4565b905060006005600085815260200190815260200160002054826117609190613a23565b90506003600085815260200190815260200160002054670de0b6b3a764000060066000878152602001908152602001600020548361179e9190613a57565b6117a89190613a57565b6117b29190613ac8565b60046000868152602001908152602001600020546117d09190613af9565b925050505b919050565b60046020528060005260406000206000915090505481565b6117fa61244e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190614085565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6118ae611962565b836040518363ffffffff1660e01b81526004016118cc929190613c80565b6020604051808303816000875af11580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190613cd5565b508173ffffffffffffffffffffffffffffffffffffffff167f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b18260405161195691906131a9565b60405180910390a25050565b60008061196d612b11565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6119a2612806565b600081116119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc90614117565b60405180910390fd5b60006002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015611a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a77906141a9565b60405180910390fd5b611a8a338461285d565b81816000016000828254611a9e9190613a23565b9250508190555081600360008581526020019081526020016000206000828254611ac89190613a23565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a303386866040518563ffffffff1660e01b8152600401611b2e9493929190613fbb565b600060405180830381600087803b158015611b4857600080fd5b505af1158015611b5c573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e84604051611ba791906131a9565b60405180910390a350611bb861292b565b5050565b600060066000838152602001908152602001600020549050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b611c1a612806565b611c24338261285d565b60006002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816002015490506000811115611dc35760008260020181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611cf1929190613c80565b6020604051808303816000875af1158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d349190613cd5565b611d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6a90613d74565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff167ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e273174383604051611dba91906131a9565b60405180910390a35b5050611dcd61292b565b50565b600063bc197c8160e01b905098975050505050505050565b6000611df2612b39565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015611e405750825b9050600060018367ffffffffffffffff16148015611e75575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611e83575080155b15611eba576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315611f0a5760018560000160086101000a81548160ff0219169083151502179055505b611f12612b4d565b611f1b86612b5f565b611f23612b73565b611f2b612b7d565b611f33612b87565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603611fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f999061423b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603612011576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612008906142cd565b60405180910390fd5b876000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156120ee5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516120e5919061433c565b60405180910390a15b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61212461244e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806121915750806003600084815260200190815260200160002054105b6121d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c7906143c9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663f242432a306121f5611962565b85856040518563ffffffff1660e01b81526004016122169493929190613fbb565b600060405180830381600087803b15801561223057600080fd5b505af1158015612244573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167e04b148840595eb234e6148251c2c9c78d692171f32febbd992963e0c138553838360405161228f929190613eef565b60405180910390a2505050565b60066020528060005260406000206000915090505481565b60076020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b60006008600083815260200190815260200160002054421061231957600860008381526020019081526020016000205461231b565b425b9050919050565b600063f23a6e6160e01b90509695505050505050565b61234061244e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123b25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016123a991906135b9565b60405180910390fd5b6123bb81612944565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612456612b91565b73ffffffffffffffffffffffffffffffffffffffff16612474611962565b73ffffffffffffffffffffffffffffffffffffffff16146124d357612497612b91565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124ca91906135b9565b60405180910390fd5b565b6124dd612b99565b60006124e76127de565b905060008160000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61252f612b91565b60405161253c91906135b9565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614806125f457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125db612bd9565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561262b576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61263561244e565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156126a057506040513d601f19601f8201168201806040525081019061269d9190614415565b60015b6126e157816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016126d891906135b9565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461274857806040517faa1d49a400000000000000000000000000000000000000000000000000000000815260040161273f919061341d565b60405180910390fd5b6127528383612c30565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146127dc576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b6000612810612ca3565b90506002816000015403612850576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b61286681612a1b565b60006002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612926576128f88383610a2c565b8160020181905550600460008381526020019081526020016000205481600101819055504281600301819055505b505050565b6000612935612ca3565b90506001816000018190555050565b600061294e612b11565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b612a24816116fb565b6004600083815260200190815260200160002081905550612a44816122e4565b600560008381526020019081526020016000208190555050565b612a66610bbf565b15612a9d576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612aa7612a5e565b6000612ab16127de565b905060018160000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af9612b91565b604051612b0691906135b9565b60405180910390a150565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080612b44612ccb565b90508091505090565b612b55612cf6565b612b5d612d36565b565b612b67612cf6565b612b7081612d57565b50565b612b7b612cf6565b565b612b85612cf6565b565b612b8f612cf6565b565b600033905090565b612ba1610bbf565b612bd7576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612c077f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612ddd565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612c3982612de7565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612c9657612c908282612eb4565b50612c9f565b612c9e612f38565b5b5050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b612cfe612f75565b612d34576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612d3e612cf6565b6000612d48612ca3565b90506001816000018190555050565b612d5f612cf6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612dd15760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612dc891906135b9565b60405180910390fd5b612dda81612944565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612e4357806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612e3a91906135b9565b60405180910390fd5b80612e707f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612ddd565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612ede9190614489565b600060405180830381855af49150503d8060008114612f19576040519150601f19603f3d011682016040523d82523d6000602084013e612f1e565b606091505b5091509150612f2e858383612f95565b9250505092915050565b6000341115612f73576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f7f612b39565b60000160089054906101000a900460ff16905090565b606082612faa57612fa582613024565b61301c565b60008251148015612fd2575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561301457836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161300b91906135b9565b60405180910390fd5b81905061301d565b5b9392505050565b60008151111561303657805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130b18161307c565b81146130bc57600080fd5b50565b6000813590506130ce816130a8565b92915050565b6000602082840312156130ea576130e9613072565b5b60006130f8848285016130bf565b91505092915050565b60008115159050919050565b61311681613101565b82525050565b6000602082019050613131600083018461310d565b92915050565b6000819050919050565b61314a81613137565b811461315557600080fd5b50565b60008135905061316781613141565b92915050565b60006020828403121561318357613182613072565b5b600061319184828501613158565b91505092915050565b6131a381613137565b82525050565b60006020820190506131be600083018461319a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131ef826131c4565b9050919050565b6131ff816131e4565b811461320a57600080fd5b50565b60008135905061321c816131f6565b92915050565b6000806040838503121561323957613238613072565b5b60006132478582860161320d565b925050602061325885828601613158565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132b58261326c565b810181811067ffffffffffffffff821117156132d4576132d361327d565b5b80604052505050565b60006132e7613068565b90506132f382826132ac565b919050565b600067ffffffffffffffff8211156133135761331261327d565b5b61331c8261326c565b9050602081019050919050565b82818337600083830152505050565b600061334b613346846132f8565b6132dd565b90508281526020810184848401111561336757613366613267565b5b613372848285613329565b509392505050565b600082601f83011261338f5761338e613262565b5b813561339f848260208601613338565b91505092915050565b600080604083850312156133bf576133be613072565b5b60006133cd8582860161320d565b925050602083013567ffffffffffffffff8111156133ee576133ed613077565b5b6133fa8582860161337a565b9150509250929050565b6000819050919050565b61341781613404565b82525050565b6000602082019050613432600083018461340e565b92915050565b6000806040838503121561344f5761344e613072565b5b600061345d85828601613158565b925050602061346e85828601613158565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261349857613497613262565b5b8235905067ffffffffffffffff8111156134b5576134b4613478565b5b6020830191508360208202830111156134d1576134d061347d565b5b9250929050565b600080602083850312156134ef576134ee613072565b5b600083013567ffffffffffffffff81111561350d5761350c613077565b5b61351985828601613482565b92509250509250929050565b6000806040838503121561353c5761353b613072565b5b600061354a85828601613158565b925050602061355b8582860161320d565b9150509250929050565b600060808201905061357a600083018761319a565b613587602083018661319a565b613594604083018561319a565b6135a1606083018461319a565b95945050505050565b6135b3816131e4565b82525050565b60006020820190506135ce60008301846135aa565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561360e5780820151818401526020810190506135f3565b60008484015250505050565b6000613625826135d4565b61362f81856135df565b935061363f8185602086016135f0565b6136488161326c565b840191505092915050565b6000602082019050818103600083015261366d818461361a565b905092915050565b60008083601f84011261368b5761368a613262565b5b8235905067ffffffffffffffff8111156136a8576136a7613478565b5b6020830191508360018202830111156136c4576136c361347d565b5b9250929050565b60008060008060008060008060a0898b0312156136eb576136ea613072565b5b60006136f98b828c0161320d565b985050602061370a8b828c0161320d565b975050604089013567ffffffffffffffff81111561372b5761372a613077565b5b6137378b828c01613482565b9650965050606089013567ffffffffffffffff81111561375a57613759613077565b5b6137668b828c01613482565b9450945050608089013567ffffffffffffffff81111561378957613788613077565b5b6137958b828c01613675565b92509250509295985092959890939650565b6137b08161307c565b82525050565b60006020820190506137cb60008301846137a7565b92915050565b6000806000606084860312156137ea576137e9613072565b5b60006137f88682870161320d565b93505060206138098682870161320d565b925050604061381a8682870161320d565b9150509250925092565b6000819050919050565b600061384961384461383f846131c4565b613824565b6131c4565b9050919050565b600061385b8261382e565b9050919050565b600061386d82613850565b9050919050565b61387d81613862565b82525050565b60006020820190506138986000830184613874565b92915050565b6000806000606084860312156138b7576138b6613072565b5b60006138c58682870161320d565b93505060206138d686828701613158565b92505060406138e786828701613158565b9150509250925092565b60008060008060008060a0878903121561390e5761390d613072565b5b600061391c89828a0161320d565b965050602061392d89828a0161320d565b955050604061393e89828a01613158565b945050606061394f89828a01613158565b935050608087013567ffffffffffffffff8111156139705761396f613077565b5b61397c89828a01613675565b92509250509295509295509295565b6000602082840312156139a1576139a0613072565b5b60006139af8482850161320d565b91505092915050565b60006139c382613850565b9050919050565b6139d3816139b8565b82525050565b60006020820190506139ee60008301846139ca565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a2e82613137565b9150613a3983613137565b9250828203905081811115613a5157613a506139f4565b5b92915050565b6000613a6282613137565b9150613a6d83613137565b9250828202613a7b81613137565b91508282048414831517613a9257613a916139f4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ad382613137565b9150613ade83613137565b925082613aee57613aed613a99565b5b828204905092915050565b6000613b0482613137565b9150613b0f83613137565b9250828201905080821115613b2757613b266139f4565b5b92915050565b7f4661726d436974795374616b696e673a20726577617264206475726174696f6e60008201527f206d7573742062652067726561746572207468616e2030000000000000000000602082015250565b6000613b896037836135df565b9150613b9482613b2d565b604082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b7f4661726d436974795374616b696e673a2070726576696f75732072657761726460008201527f7320706572696f64206d75737420626520636f6d706c65746500000000000000602082015250565b6000613c1b6039836135df565b9150613c2682613bbf565b604082019050919050565b60006020820190508181036000830152613c4a81613c0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613c9560008301856135aa565b613ca2602083018461319a565b9392505050565b613cb281613101565b8114613cbd57600080fd5b50565b600081519050613ccf81613ca9565b92915050565b600060208284031215613ceb57613cea613072565b5b6000613cf984828501613cc0565b91505092915050565b7f4661726d436974795374616b696e673a20726577617264207472616e7366657260008201527f206661696c656400000000000000000000000000000000000000000000000000602082015250565b6000613d5e6027836135df565b9150613d6982613d02565b604082019050919050565b60006020820190508181036000830152613d8d81613d51565b9050919050565b7f4661726d436974795374616b696e673a2072657761726420616d6f756e74206d60008201527f7573742062652067726561746572207468616e20300000000000000000000000602082015250565b6000613df06035836135df565b9150613dfb82613d94565b604082019050919050565b60006020820190508181036000830152613e1f81613de3565b9050919050565b7f4661726d436974795374616b696e673a206e6f20746f6b656e73207374616b6560008201527f6420666f72207468697320494400000000000000000000000000000000000000602082015250565b6000613e82602d836135df565b9150613e8d82613e26565b604082019050919050565b60006020820190508181036000830152613eb181613e75565b9050919050565b6000606082019050613ecd60008301866135aa565b613eda60208301856135aa565b613ee7604083018461319a565b949350505050565b6000604082019050613f04600083018561319a565b613f11602083018461319a565b9392505050565b7f4661726d436974795374616b696e673a2063616e6e6f74207374616b65203000600082015250565b6000613f4e601f836135df565b9150613f5982613f18565b602082019050919050565b60006020820190508181036000830152613f7d81613f41565b9050919050565b600082825260208201905092915050565b50565b6000613fa5600083613f84565b9150613fb082613f95565b600082019050919050565b600060a082019050613fd060008301876135aa565b613fdd60208301866135aa565b613fea604083018561319a565b613ff7606083018461319a565b818103608083015261400881613f98565b905095945050505050565b7f4661726d436974795374616b696e673a2063616e6e6f74207265636f7665722060008201527f72657761726420746f6b656e0000000000000000000000000000000000000000602082015250565b600061406f602c836135df565b915061407a82614013565b604082019050919050565b6000602082019050818103600083015261409e81614062565b9050919050565b7f4661726d436974795374616b696e673a2063616e6e6f7420756e7374616b652060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b60006141016021836135df565b915061410c826140a5565b604082019050919050565b60006020820190508181036000830152614130816140f4565b9050919050565b7f4661726d436974795374616b696e673a20756e7374616b6520616d6f756e742060008201527f657863656564732062616c616e63650000000000000000000000000000000000602082015250565b6000614193602f836135df565b915061419e82614137565b604082019050919050565b600060208201905081810360008301526141c281614186565b9050919050565b7f4661726d436974795374616b696e673a206661726d20746f6b656e206973207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614225602b836135df565b9150614230826141c9565b604082019050919050565b6000602082019050818103600083015261425481614218565b9050919050565b7f4661726d436974795374616b696e673a2072657761726420746f6b656e20697360008201527f207a65726f206164647265737300000000000000000000000000000000000000602082015250565b60006142b7602d836135df565b91506142c28261425b565b604082019050919050565b600060208201905081810360008301526142e6816142aa565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061432661432161431c846142ed565b613824565b6142f7565b9050919050565b6143368161430b565b82525050565b6000602082019050614351600083018461432d565b92915050565b7f4661726d436974795374616b696e673a2063616e6e6f74207265636f7665722060008201527f7374616b656420746f6b656e7300000000000000000000000000000000000000602082015250565b60006143b3602d836135df565b91506143be82614357565b604082019050919050565b600060208201905081810360008301526143e2816143a6565b9050919050565b6143f281613404565b81146143fd57600080fd5b50565b60008151905061440f816143e9565b92915050565b60006020828403121561442b5761442a613072565b5b600061443984828501614400565b91505092915050565b600081519050919050565b600081905092915050565b600061446382614442565b61446d818561444d565b935061447d8185602086016135f0565b80840191505092915050565b60006144958284614458565b91508190509291505056fea26469706673582212208228e6ed155273e3785c2a1087b0cc11388b215dcd8ab6b2ef6fc9686323923c64736f6c634300081c0033",
  "devdoc": {
    "custom:security-contact": "admin@farmcity.dev",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addReward(uint256,uint256)": {
        "params": {
          "amount": "The amount of reward tokens to add",
          "tokenId": "The ID of the token to add rewards for"
        }
      },
      "claimReward(uint256)": {
        "params": {
          "tokenId": "The ID of the token to claim rewards for"
        }
      },
      "claimRewards(uint256[])": {
        "params": {
          "tokenIds": "Array of token IDs to claim rewards for"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "earned(address,uint256)": {
        "params": {
          "account": "The address of the user",
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The earned rewards"
        }
      },
      "exit(uint256)": {
        "params": {
          "tokenId": "The ID of the token to exit from"
        }
      },
      "getRewardFinishTime(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The reward finish time"
        }
      },
      "getRewardRate(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The reward rate (tokens per second)"
        }
      },
      "getStakedAmount(address,uint256)": {
        "params": {
          "account": "The address of the user",
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The staked amount"
        }
      },
      "getTotalStaked(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The total staked amount"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_farmToken": "The address of the FarmCity ERC1155 token contract",
          "_rewardToken": "The address of the USDT ERC20 token contract",
          "initialOwner": "The address of the initial owner"
        }
      },
      "lastTimeRewardApplicable(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The timestamp when rewards were last applicable"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "recoverERC1155(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to recover",
          "tokenAddress": "The address of the token to recover",
          "tokenId": "The ID of the token to recover"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to recover",
          "tokenAddress": "The address of the token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rewardPerToken(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        },
        "returns": {
          "_0": "The current reward per token"
        }
      },
      "setRewardDuration(uint256,uint256)": {
        "params": {
          "duration": "The new duration in seconds",
          "tokenId": "The ID of the token to set the duration for"
        }
      },
      "stake(uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to stake",
          "tokenId": "The ID of the token to stake"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to unstake",
          "tokenId": "The ID of the token to unstake"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "FarmCityStaking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addReward(uint256,uint256)": {
        "notice": "Add rewards for a specific token ID"
      },
      "claimReward(uint256)": {
        "notice": "Claim accumulated rewards for a specific token ID"
      },
      "claimRewards(uint256[])": {
        "notice": "Claim accumulated rewards for multiple token IDs"
      },
      "earned(address,uint256)": {
        "notice": "Calculate the earned rewards for a user and token ID"
      },
      "exit(uint256)": {
        "notice": "Exit: Unstake all tokens and claim rewards for a specific token ID"
      },
      "farmToken()": {
        "notice": "The FarmCity ERC1155 token contract"
      },
      "getRewardFinishTime(uint256)": {
        "notice": "Get the reward finish time for a token ID"
      },
      "getRewardRate(uint256)": {
        "notice": "Get the reward rate for a specific token ID"
      },
      "getStakedAmount(address,uint256)": {
        "notice": "Get the staked amount for a user and token ID"
      },
      "getTotalStaked(uint256)": {
        "notice": "Get the total staked amount for a token ID"
      },
      "initialize(address,address,address)": {
        "notice": "Initialize the contract"
      },
      "lastTimeRewardApplicable(uint256)": {
        "notice": "Get the last time rewards were applicable for a token ID"
      },
      "lastUpdateTimePerToken(uint256)": {
        "notice": "Mapping from tokenId to last update time"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "Handle the receipt of multiple ERC1155 token types"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Handle the receipt of a single ERC1155 token type"
      },
      "pause()": {
        "notice": "Pause staking"
      },
      "recoverERC1155(address,uint256,uint256)": {
        "notice": "Recover ERC1155 tokens sent to this contract by mistake"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 tokens sent to this contract by mistake"
      },
      "rewardDurationPerToken(uint256)": {
        "notice": "Mapping from tokenId to reward duration in seconds"
      },
      "rewardFinishTimePerToken(uint256)": {
        "notice": "Mapping from tokenId to reward finish time"
      },
      "rewardPerToken(uint256)": {
        "notice": "Calculate the current reward per token for a specific token ID"
      },
      "rewardPerTokenStored(uint256)": {
        "notice": "Mapping from tokenId to accumulated rewards per token"
      },
      "rewardRatePerToken(uint256)": {
        "notice": "Mapping from tokenId to reward rate (tokens per second)"
      },
      "rewardToken()": {
        "notice": "The USDT ERC20 token used for rewards"
      },
      "setRewardDuration(uint256,uint256)": {
        "notice": "Set the reward duration for a specific token ID"
      },
      "stake(uint256,uint256)": {
        "notice": "Stake FarmCity tokens"
      },
      "stakeInfo(uint256,address)": {
        "notice": "Mapping from tokenId to user address to stake info"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface"
      },
      "totalStaked(uint256)": {
        "notice": "Mapping from tokenId to total staked amount"
      },
      "unpause()": {
        "notice": "Unpause staking"
      },
      "unstake(uint256,uint256)": {
        "notice": "Unstake FarmCity tokens"
      }
    },
    "notice": "Staking contract for FarmCity ERC1155 tokens with USDT rewards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9261,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "farmToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC1155)3001"
      },
      {
        "astId": 9265,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3806"
      },
      {
        "astId": 9287,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "stakeInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakeInfo)9279_storage))"
      },
      {
        "astId": 9292,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9297,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9302,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "lastUpdateTimePerToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9307,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "rewardRatePerToken",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9312,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "rewardDurationPerToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9317,
        "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
        "label": "rewardFinishTimePerToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155)3001": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3806": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StakeInfo)9279_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmCityStaking.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)9279_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakeInfo)9279_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FarmCityStaking.StakeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakeInfo)9279_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakeInfo)9279_storage": {
        "encoding": "inplace",
        "label": "struct FarmCityStaking.StakeInfo",
        "members": [
          {
            "astId": 9272,
            "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9274,
            "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
            "label": "rewardPerTokenPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9276,
            "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9278,
            "contract": "contracts/FarmCityStaking.sol:FarmCityStaking",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}